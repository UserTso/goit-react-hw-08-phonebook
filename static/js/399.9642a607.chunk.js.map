{"version":3,"file":"static/js/399.9642a607.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","Pages/PageContact/PageContact.styled.jsx","Pages/PageContact/PageContact.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\n\n\nexport const Wrapper = styled.div`\ndisplay: flex;\njustify-content: center;\n`;\n\nexport const Forma = styled(Form)`\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\ndisplay: flex;\njustify-content: space-between;\nflex-direction: column;\nwidth: 100%;\nmargin-bottom: 10px;\n\n&:last-child {margin-bottom: 0}\n`;\n\nexport const ErrorText = styled.p`\ncolor: red;\n`;\n\nexport const Span = styled.span`\ncolor: grey;\n`;\n\nexport const InputForm = styled(Field)`\nborder: 1px solid transparent;\nmargin-left: 5px;\n`;\n\nexport const Button = styled.button`\nwidth: 100px;\nheight: 30px;\ncolor: grey;\nbackground-color: #ffeb3ba6;\nborder-radius: 4px;\nborder: 1px solid transparent;\nbox-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\nmargin-top: 10px;\nmargin-left: auto;\nmargin-right: auto;\n`;\n","export const getContactsItems = state => state.contacts.items;\nexport const getContactsIsLoading = state => state.contacts.isLoading;\nexport const getContactsError = state => state.contacts.error;\nexport const getContactsFilter = state => state.contacts.filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n\tWrapper,\n\tForma,\n\tLabelForm,\n\tInputForm,\n\tSpan,\n\tErrorText,\n\tButton,\n} from './ContactForm.styled';\nimport { ErrorMessage, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector } from 'react-redux';\nimport {getContactsIsLoading} from 'redux/contacts/contactsSelectors';\n\n\nconst schema = yup.object().shape({\n\tname: yup.string().max(16).required(),\n\tnumber: yup.string().required()});\n\nconst FormError = ({name}) => {\n\treturn <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />\n}\n\nexport function ContactForm({ submitForm }) {\n\tconst isLoading = useSelector(getContactsIsLoading);\n\tconst initialValues = {\n\t\tname: '',\n\t\tnumber: '',\n\t};\n\n\tconst handleSubmitForm = ({ name, number }, { resetForm }) => {\n\t\tconst newContact = {\n\t\t\tname: name,\n\t\t\tnumber: number,\n\t\t};\n\t\t// передача нового контакта в App\n\t\tsubmitForm(newContact);\n\t\tresetForm();\n\t};\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Formik onSubmit={handleSubmitForm} initialValues={initialValues} validationSchema={schema}>\n\t\t\t\t<Forma>\n\t\t\t\t\t<LabelForm>\n\t\t\t\t\t\t<Span>Name</Span>\n\t\t\t\t\t\t<InputForm\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormError name=\"name\" title=\"title\"/>\n\t\t\t\t\t</LabelForm>\n\t\t\t\t\t<LabelForm>\n\t\t\t\t\t\t<Span>Number</Span>\n\t\t\t\t\t\t<InputForm\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tname=\"number\"\n\t\t\t\t\t\t\ttitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormError name=\"number\" title=\"title\" />\n\t\t\t\t\t</LabelForm>\n\t\t\t\t\t<Button type=\"submit\" disabled={isLoading}>{isLoading ? 'loading...' : 'Add contact'}</Button>\n\t\t\t\t</Forma>\n\t\t\t</Formik>\n\t\t</Wrapper>\n\t);\n}\n\n\nContactForm.propTypes = {\n\tsubmitForm: PropTypes.func.isRequired,\n  };","import PropTypes from 'prop-types';\n\nexport function Section({title, children}) { \n    console.log(typeof children)\n    \n    return (\n        <section>\n            <h1>\n                {title}\n            </h1>\n            {children}\n        </section>\n    )\n}\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};","import styled from '@emotion/styled';\n\n\nexport const LabelForm = styled.label`\ncolor: grey;\n`;\n\nexport const InputForm = styled.input`\nborder: 1px solid transparent;\nmargin-left: 5px;\n`;","import PropTypes from 'prop-types';\nimport {LabelForm, InputForm} from './Filter.styled';\n\nexport const Filter = ({onChange}) => {\n    return (\n  <LabelForm>Finds contacts by name\n    <InputForm onChange={onChange} type=\"text\" name=\"filter\" placeholder=\"name\" />\n  </LabelForm>\n    )\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n}","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\ndisplay: flex;\nlist-style: none;\nmargin-bottom: 10px;\njustify-content: space-between;\n&:last-child {margin-bottom: 0};\n\nborder-bottom: 1px solid rgba(128 128 128 / 10%);\n`;\n\nexport const Span = styled.span`\ncolor: grey;\n\n`;\n\nexport const Button = styled.button`\nwidth: 60px;\nheight: 20px;\ncolor: grey;\nbackground-color: #ffffff;\nborder-radius: 4px;\nborder: 1px solid transparent;\nbox-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\n\n`;\n","import PropTypes from 'prop-types';\n// import { useState } from 'react';\n// import { useSelector } from 'react-redux';\nimport { Item, Span, Button } from './ContactItem.styled';\n// import{getContactsIsLoading} from 'redux/contacts/contactsSelectors';\n\nexport const ContactItem = ({ id, name, number, onDeleteContact }) => {\n\t// const [isLocalLoading, setIsLocalLoading] = useState(false);\n// const isLoading = useSelector(getContactsIsLoading);\n\treturn (\n\t\t<Item>\n\t\t\t<Span>\n\t\t\t\t{name}:{number}\n\t\t\t</Span>\n\t\t\t<Button\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tonDeleteContact(id);\n\t\t\t\t\t// setIsLocalLoading(true);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/* {isLoading ? 'loading...' : 'Delete'} */}\n\t\t\t\tDelete\n\t\t\t</Button>\n\t\t</Item>\n\t);\n};\n\nContactItem.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tnumber: PropTypes.string.isRequired,\n\tonDeleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Box = styled.div`\n    margin: auto;\n`;\n\nexport const List = styled.ul`\nmargin-left: 0;\npadding-left: 0;\n`;","\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport GridLoader from \"react-spinners/GridLoader\";\nimport {ContactItem} from '../ContactItem';\nimport {List, Box} from './ContactList.styled';\n\n\nexport const ContactList = ({contacts, onDeleteContact}) => {\n\n  \n\n   const spinner = useSelector(state=> state.contacts.isLoading)\n\n    return (\n       <Box>\n       {spinner ? <GridLoader  color=\"#12039b\" /> : <List>\n{contacts.map(({id, name, number}) => {\n    return (\n        <ContactItem key={id} id={id} name={name} number={number} onDeleteContact={onDeleteContact}/>\n    )\n})}\n        </List>}\n       </Box>\n        \n    )\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n\n","import styled from '@emotion/styled';\n\nexport const GlobalBox = styled.div`\npadding-left: 15px;\npadding-right: 15px;\nmargin-left: auto;\nmargin-right: auto;\ndisplay: flex;\nflex-direction: column;\nbackground-color: #8faebc45;\ntext-align: center;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport {useEffect} from 'react';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Section } from '../../components/Section/Section';\nimport { Filter } from '../../components/Filter/Filter';\nimport {ContactList} from '../../components/ContactList/ContactList';\nimport {GlobalBox} from './PageContact.styled';\nimport { addContacts, deleteContacts } from \"redux/contacts/contactsOperations\";\nimport {filterContacts} from 'redux/contacts/contactsSlice';\nimport { getContactsItems, getContactsFilter, getContactsError} from 'redux/contacts/contactsSelectors';\nimport {getIsLoggedin} from 'redux/auth/authSelectors';\nimport { useNavigate } from 'react-router-dom';\n\nexport function PageContact() {\n\n// const {contacts, filter} = useSelector(state => state);\nconst items = useSelector(getContactsItems);\nconst stateFilter = useSelector(getContactsFilter);\nconst stateError = useSelector(getContactsError);\nconst login = useSelector(getIsLoggedin);\n\nconst dispatch = useDispatch();\nconst navigate = useNavigate();\n\nif(stateError) {\n\talert('Перезвоните позже!!!)))')\n};\n\nuseEffect(()=>{\n\t        dispatch(fetchContacts())\n\t    }, [dispatch, login, navigate])\n\nconst getValueSubmitForm = value => {\n    if(checkContacts(value.name)) {\n      return alert(`${value.name} is already in contacts`)\n    }\n\t\t\tdispatch(addContacts(value))\n\t};\n\nconst checkContacts = contact => {\n  return items.find(element => \n    element.name.toLowerCase() === contact.toLowerCase()\n  )\n}\n\nconst onChange = (event) => {\n\t\tconst name = event.currentTarget.value;\n\t\tdispatch(filterContacts(name))\n\t    }\n\nconst onFilterContact = () => {\n\tconst currentFilter = stateFilter.toLowerCase();\n\treturn items.filter((element) => {\nreturn element.name.toLowerCase().includes(currentFilter)\n\t})\n}\n\n\n\t\treturn (\n\t\t\t<>\n\t\t\t<GlobalBox>\n\t\t\t\t<Section title=\"PhoneBook\">\n\t\t\t\t\t<ContactForm submitForm={getValueSubmitForm} />\n\t\t\t\t</Section>\n\t\t\t\t<Section title=\"Contacts\">\n\t\t\t\t\t<Filter onChange={onChange} />\n\t\t\t\t\t<ContactList contacts={onFilterContact()} \n\t\t\t\t\tonDeleteContact={(id) => dispatch(deleteContacts(id))}/>\n\t\t\t\t</Section>\n\t\t\t\t</GlobalBox>\n\t\t\t</>\n\t\t);\n}\n\n"],"names":["Wrapper","styled","Forma","Form","LabelForm","ErrorText","Span","InputForm","Field","Button","getContactsItems","state","contacts","items","getContactsIsLoading","isLoading","getContactsError","error","getContactsFilter","filter","schema","yup","shape","name","max","required","number","FormError","render","message","ContactForm","submitForm","useSelector","onSubmit","resetForm","initialValues","validationSchema","type","title","disabled","Section","children","console","log","Filter","onChange","placeholder","Item","ContactItem","id","onDeleteContact","onClick","Box","List","ContactList","spinner","color","map","GlobalBox","PageContact","stateFilter","stateError","login","getIsLoggedin","dispatch","useDispatch","navigate","useNavigate","alert","useEffect","fetchContacts","checkContacts","contact","find","element","toLowerCase","value","addContacts","event","currentTarget","filterContacts","currentFilter","includes","onFilterContact","deleteContacts"],"sourceRoot":""}